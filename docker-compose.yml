version: "3.8"

# https://stackoverflow.com/questions/44284484/docker-compose-share-named-volume-between-multiple-containers
# x-services-volume:
#   &services-volume
#   type: bind
#   source: ./actinia-core-data/resources
#   target: ./actinia_core/resources
   
services:
  
  db:
    image: postgis/postgis:13-3.2-alpine
    volumes:
      - ./data/db:/var/lib/postgresql/data:Z
      # - pg_tileserv_db:/var/lib/postgresql/data
    ports:
      - "5431:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
   
  actinia-core:
    image: mundialis/actinia-core:3.1.2
    volumes:
      - ./actinia-core-data/grassdb:/actinia_core/grassdb:Z
      - ./actinia-core-data/userdata:/actinia_core/userdata
      - ./actinia-core-data/resources:/actinia_core/resources:Z

      # - *services-volume
    ports:
      - "8088:8088"
    depends_on:
      - redis

  redis:
    image: redis:5.0.4-alpine
    volumes:
      - ./redis_data:/data
    environment:
      - REDIS_PASS_FILE=/data/config/.redis
    command: [
      "sh", "-c",
      '
      docker-entrypoint.sh
      "/data/config/redis.conf"
      --requirepass "$$(cat $$REDIS_PASS_FILE)"
      '
    ]
    ports:
        - "6379:6379"

  django-redis-cache:
    image: redis:5.0.4-alpine
    volumes:
      - ./django_redis_cache:/data
    environment:
      - REDIS_PASS_FILE=/data/config/.redis
    command: [
      "sh", "-c",
      '
      docker-entrypoint.sh
      "/data/config/redis.conf"
      --requirepass "$$(cat $$REDIS_PASS_FILE)"
      '
    ]
    ports:
        - "6370:6370"

# pg_tileserv:
#   image: pramsey/pg_tileserv:latest-alpine-3.12
#   build:
#     context: ../..
#     dockerfile: Dockerfile.alpine
#     args:
#       VERSION: latest-alpine-3.12
#   container_name: pg_tileserv
#   env_file:
#     - pg_tileserv.env
#   depends_on:
#     - db
#   ports:
#     - 7800:7800

  api:
    build: .
    command: bash -c "python manage.py runserver 0.0.0.0:8005"
    volumes:
      - .:/code
      - ./actinia-core-data/resources:/actinia_core/resources:Z

    ports:
      - "8005:8005"
    depends_on:
      - db
      - actinia-core
      - django-redis-cache

  celery_worker:
    build:
      context: .
      # dockerfile: ./Dockerfile
    # image: django_celery_example_celery_worker
    command: celery -A api.celery worker --loglevel=INFO
    volumes:
      - .:/code
    env_file:
      - ./api/.env
    depends_on:
      - redis
      - db
      - api
  
  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    command: npm start
    volumes:
      # - /code/node_modules
      - ./webapp/:/code
    ports:
      - "3000:3000"
    depends_on:
      - api
  
  terracotta:
    build:
      context: ./terracotta
      dockerfile: Dockerfile
    volumes:
      - ./terracotta/data:/app/data
      # - <<: *services-volume
      #   target: ./app/data
    ports:
      - 5000:5000
      - 5001:5001
        
  titiler:
    build:
      context: ./titiler
      dockerfile: Dockerfile
    ports:
      - 7000:7000
    depends_on:
      - actinia-core

  wireshark:
    image: lscr.io/linuxserver/wireshark
    container_name: wireshark
    cap_add:
      - NET_ADMIN
    network_mode: bridge
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    # volumes:
    #   - /path/to/config:/config
    ports:
      #HOST:CONTAINER
      - 3050:3000
    restart: unless-stopped



  # geoserver:
  #   image: kartoza/geoserver:${GS_VERSION}
  #   volumes:
  #       - geoserver-data:/opt/geoserver/data_dir
  #   restart: on-failure
  #   environment:
  #     - GEOSERVER_DATA_DIR=${GEOSERVER_DATA_DIR}
  #     - GEOWEBCACHE_CACHE_DIR=${GEOWEBCACHE_CACHE_DIR}
  #     - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD}
  #     - GEOSERVER_ADMIN_USER=${GEOSERVER_ADMIN_USER}
  #     - INITIAL_MEMORY=${INITIAL_MEMORY}
  #     - MAXIMUM_MEMORY=${MAXIMUM_MEMORY}
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   healthcheck:
  #     test: curl --fail -s http://localhost:8080/ || exit 1
  #     interval: 1m30s
  #     timeout: 10s
  #     retries: 3

  # nginx:
  #   image: nginx
  #   volumes:
  #     - ./nginx/geoserver:/etc/nginx/conf.d:ro
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: 200m
  #       max-file: '10'
  #   depends_on:
  #     - geoserver
  #   ports:
  #     - "80:80"


  # wps:
  #   restart: always
  #   build:
  #     context: ./wps
  #     dockerfile: Dockerfile
  #   image: gh_wps
  #   container_name: gh_wps_1
  #   volumes:
  #     - ./nginx/conf.d:/etc/nginx/conf.d/
  #     - ./nginx/log:/var/log/nginx/
  #     - ./pywps:/opt/pywps/
  #     - ./pywps/log:/var/log/pywps/
  #     - /data/grassdata/geoharmonizer_aq_wps:/data/grassdata/aq_location
  #   ports:
  #     - 8088:8088
  #   environment:
  #     - NGINX_HTTP=http
  #     - NGINX_HOST=localhost
  #     - NGINX_PORT=8088