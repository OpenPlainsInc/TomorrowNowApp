version: "3.9"

# https://stackoverflow.com/questions/44284484/docker-compose-share-named-volume-between-multiple-containers
# x-services-volume:
#   &services-volume
#   type: bind
#   source: ./actinia-core-data/resources
#   target: ./actinia_core/resources
volumes:
   geoserver-data:
   geo-db-data:
   settings:
services:
  
  db:
    image: postgis/postgis:13-3.2-alpine
    volumes:
      - ./data/db:/var/lib/postgresql/data:Z
      # - pg_tileserv_db:/var/lib/postgresql/data
    ports:
      - "5431:5432"
    restart: always
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
   
  actinia-core:
    # image: mundialis/actinia-core:4.0.0
    build:
        context: ./actinia
        dockerfile: Dockerfile
   
    volumes:
      - ./actinia-core-data/grassdb:/actinia_core/grassdb:Z
      - ./actinia-core-data/userdata:/actinia_core/userdata
      - ./actinia/pgpass:/mnt/pgpass
      - ./actinia-core-data/geodata_dir:/mnt/geodata
      - ./actinia-core-data/workspace/temp_db:/actinia_core/workspace/temp_db
      - ./actinia-core-data/workspace/tmp:/actinia_core/workspace/tmp
      - ./actinia-core-data/resources:/actinia_core/resources:Z

      # - *services-volume
    restart: always
    ports:
      - "8088:8088"
      - "5439:5432"
    depends_on:
      - redis

  redis:
    image: redis:5.0.4-alpine
    volumes:
      - ./redis_data:/data
    environment:
      - REDIS_PASS_FILE=/data/config/.redis
    command: [
      "sh", "-c",
      '
      docker-entrypoint.sh
      "/data/config/redis.conf"
      --requirepass "$$(cat $$REDIS_PASS_FILE)"
      '
    ]
    ports:
        - "6379:6379"

  django-redis-cache:
    image: redis:5.0.4-alpine
    volumes:
      - ./django_redis_cache:/data
    environment:
      - REDIS_PASS_FILE=/data/config/.redis
    command: [
      "sh", "-c",
      '
      docker-entrypoint.sh
      "/data/config/redis.conf"
      --requirepass "$$(cat $$REDIS_PASS_FILE)"
      '
    ]
    ports:
        - "6370:6370"

# pg_tileserv:
#   image: pramsey/pg_tileserv:latest-alpine-3.12
#   build:
#     context: ../..
#     dockerfile: Dockerfile.alpine
#     args:
#       VERSION: latest-alpine-3.12
#   container_name: pg_tileserv
#   env_file:
#     - pg_tileserv.env
#   depends_on:
#     - db
#   ports:
#     - 7800:7800

  api:
    build: .
    command: bash -c "python manage.py runserver 0.0.0.0:8005"
    volumes:
      - .:/code
      - ./actinia-core-data/resources:/actinia_core/resources:Z

    ports:
      - "8005:8005"
      - "8010:8010"
    depends_on:
      - db
      - actinia-core
      - django-redis-cache

  celery_worker:
    build:
      context: .
      # dockerfile: ./Dockerfile
    # image: django_celery_example_celery_worker
    command: celery -A api.celery worker --loglevel=INFO
    volumes:
      - .:/code
    env_file:
      - ./api/.env
    depends_on:
      - redis
      - db
      - api
  
  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    command: npm start
    volumes:
      # - /code/node_modules
      - ./webapp/:/code
    ports:
      - "3000:3000"
    depends_on:
      - api    
  titiler:
    build:
      context: ./titiler
      dockerfile: Dockerfile
    ports:
      - 7000:7000
    depends_on:
      - actinia-core

  # Only turn on when needed
  # wireshark:
  #   image: lscr.io/linuxserver/wireshark
  #   container_name: wireshark
  #   cap_add:
  #     - NET_ADMIN
  #   network_mode: bridge
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=America/New_York
  #   ports:
  #     #HOST:CONTAINER
  #     - 3050:3000
  #   restart: unless-stopped
  geoserver:
    # image: kartoza/geoserver:2.20.4
    env_file:
        - ./geoserver/.env
    build:
      context: ./geoserver
      dockerfile: Dockerfile
    volumes:
        - ./geoserver-data/data_dir:/opt/geoserver/data_dir
        - ./geoserver-data/settings:/settings
        - ./actinia-core-data:/opt/geoserver/actinia_data
    restart: on-failure
    depends_on:
      - db
        # condition: service_healthy
    healthcheck:
      test: curl --fail -s http://localhost:8080/ || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3
    ports:
      - 8600:8080
      - 8643:8443

  # nginx:
  #   image: nginx:1.22.0
  #   volumes:
  #     - ./nginx/geoserver:/etc/nginx/conf.d:ro
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: 200m
  #       max-file: '10'
  #   depends_on:
  #     - geoserver
  #   ports:
  #     - "80:80"